{"version":3,"file":"changePermissions.js","sourceRoot":"","sources":["../../../../../../../projects/ngx-filemanager-api-firebase/src/lib/api/commands/changePermissions.ts"],"names":[],"mappings":"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","sourcesContent":["import { File } from '../../types/google-cloud-types';\r\nimport { Bucket } from '@google-cloud/storage';\r\nimport * as request from 'request';\r\nimport { GetAllChildrenWithPrefix } from '../../utils/storage-helper';\r\nimport {\r\n  RetrieveFilePermissions,\r\n  UpdateFilePermissions,\r\n  blankPermissionsObj\r\n} from '../../utils/permissions-helper';\r\nimport {\r\n  PermissionsObject,\r\n  PermisionsRole,\r\n  PermissionEntity,\r\n  UserCustomClaims,\r\n  ResultObj\r\n} from 'ngx-filemanager-core/public_api';\r\nimport { VError } from 'verror';\r\n\r\nexport function SetPermissionToObj(\r\n  permissionsObj: PermissionsObject,\r\n  role: PermisionsRole,\r\n  entity: PermissionEntity\r\n): PermissionsObject {\r\n  const newPermissions = {\r\n    ...blankPermissionsObj(),\r\n    ...permissionsObj\r\n  };\r\n  let list: PermissionEntity[];\r\n  switch (role) {\r\n    case 'OWNER':\r\n      list = newPermissions.owners;\r\n      break;\r\n    case 'WRITER':\r\n      list = newPermissions.writers;\r\n      break;\r\n    case 'READER':\r\n      list = newPermissions.readers;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  const match = list.find(u => u.id === entity.id);\r\n  if (!match) {\r\n    list.push(entity);\r\n  }\r\n  return newPermissions;\r\n}\r\n\r\nexport async function TryChangeSingleFilePermissions(\r\n  file: File,\r\n  role: PermisionsRole,\r\n  entity: PermissionEntity\r\n) {\r\n  try {\r\n    const currentPermissions = await RetrieveFilePermissions(file);\r\n    const newPermissions = SetPermissionToObj(currentPermissions, role, entity);\r\n    const res = await UpdateFilePermissions(file, newPermissions);\r\n    return res;\r\n  } catch (error) {\r\n    throw new VError(error);\r\n  }\r\n}\r\n\r\nasync function tryChangePermissions(\r\n  bucket: Bucket,\r\n  filePath: string,\r\n  role: PermisionsRole,\r\n  entity: PermissionEntity,\r\n  isRecursive: boolean\r\n): Promise<request.Response[]> {\r\n  if (isRecursive) {\r\n    try {\r\n      const allChildren = await GetAllChildrenWithPrefix(bucket, filePath);\r\n      const successArray = await Promise.all(\r\n        allChildren.map(file =>\r\n          TryChangeSingleFilePermissions(file, role, entity)\r\n        )\r\n      );\r\n      return successArray;\r\n    } catch (error) {\r\n      throw new VError(error);\r\n    }\r\n  } else {\r\n    try {\r\n      const file = bucket.file(filePath);\r\n      const result = await TryChangeSingleFilePermissions(file, role, entity);\r\n      return [result];\r\n    } catch (error) {\r\n      throw new VError(error);\r\n    }\r\n  }\r\n}\r\n\r\nexport async function ChangePermissions(\r\n  bucket: Bucket,\r\n  items: string[],\r\n  role: PermisionsRole,\r\n  entity: PermissionEntity,\r\n  isRecursive: boolean,\r\n  claims: UserCustomClaims\r\n): Promise<ResultObj> {\r\n  try {\r\n    const successArr = await Promise.all(\r\n      items.map(filePath =>\r\n        tryChangePermissions(bucket, filePath, role, entity, isRecursive)\r\n      )\r\n    );\r\n    // const successArr = successArrArr.reduce((acc, cur) => {\r\n    //   return acc.concat(cur);\r\n    // }, []);\r\n    // const results = getResultFromArray(successArr);\r\n    // return results;\r\n    return {\r\n      success: successArr as any\r\n    };\r\n  } catch (error) {\r\n    throw new VError(error);\r\n  }\r\n}\r\n"]}
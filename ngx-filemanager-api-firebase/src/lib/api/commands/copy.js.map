{"version":3,"file":"copy.js","sourceRoot":"","sources":["../../../../../../../projects/ngx-filemanager-api-firebase/src/lib/api/commands/copy.ts"],"names":[],"mappings":";;;AACA,uEAAqE;AACrE,yDAGkC;AAClC,2BAA6B;AAC7B,6DAAmF;AAEnF,iCAAgC;AAEhC,SAAsB,gBAAgB,CACpC,MAAc,EACd,QAAgB,EAChB,eAAuB;;;;;;;oBAGf,oBAAkB,kCAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAChD,qBAAM,yCAAwB,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAA;;oBAA9D,WAAW,GAAG,SAAgD;oBAC/C,qBAAM,OAAO,CAAC,GAAG,CACpC,WAAW,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,4BAAW,CAAC,CAAC,EAAE,iBAAe,EAAE,eAAe,CAAC,EAAhD,CAAgD,CAAC,CACvE,EAAA;;oBAFK,YAAY,GAAG,SAEpB;oBACD,sBAAO,YAAY,EAAC;;;oBAEpB,MAAM,IAAI,eAAM,CAAC,OAAK,CAAC,CAAC;;;;;CAE3B;AAfD,4CAeC;AAED,SAAsB,SAAS,CAC7B,MAAc,EACd,KAAe,EACf,gBAAwB,EACxB,MAAwB;;;;;;;oBAGhB,oBAAkB,yCAA0B,CAAC,gBAAgB,CAAC,CAAC;oBAC3C,qBAAM,OAAO,CAAC,GAAG,CACzC,KAAK,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,gBAAgB,CAAC,MAAM,EAAE,QAAQ,EAAE,iBAAe,CAAC,EAAnD,CAAmD,CAAC,CAC3E,EAAA;;oBAFK,iBAAiB,GAAG,SAEzB;oBACK,cAAc,GAAG,iBAAiB,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG;wBACvD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBACzB,CAAC,EAAE,EAAE,CAAC,CAAC;oBACD,OAAO,GAAG,wCAAkB,CAAC,cAAc,CAAC,CAAC;oBACnD,sBAAO,OAAO,EAAC;;;oBAEf,MAAM,IAAI,eAAM,CAAC,OAAK,CAAC,CAAC;;;;;CAE3B;AAnBD,8BAmBC","sourcesContent":["import { Bucket } from '../../types/google-cloud-types';\r\nimport { getResultFromArray } from '../../utils/translation-helpers';\r\nimport {\r\n  EnsureGoogleStoragePathDir,\r\n  EnsureNoPrefixSlash\r\n} from '../../utils/path-helpers';\r\nimport * as path from 'path';\r\nimport { GetAllChildrenWithPrefix, TryCopyFile } from '../../utils/storage-helper';\r\nimport { UserCustomClaims } from 'ngx-filemanager-core/public_api';\r\nimport { VError } from 'verror';\r\n\r\nexport async function copyWithChildren(\r\n  bucket: Bucket,\r\n  itemPath: string,\r\n  newFolderPrefix: string\r\n) {\r\n  try {\r\n    const oldFolderPrefix = EnsureNoPrefixSlash(path.dirname(itemPath));\r\n    const allChildren = await GetAllChildrenWithPrefix(bucket, itemPath);\r\n    const successArray = await Promise.all(\r\n      allChildren.map(f => TryCopyFile(f, oldFolderPrefix, newFolderPrefix))\r\n    );\r\n    return successArray;\r\n  } catch (error) {\r\n    throw new VError(error);\r\n  }\r\n}\r\n\r\nexport async function CopyFiles(\r\n  bucket: Bucket,\r\n  items: string[],\r\n  newDirectoryPath: string,\r\n  claims: UserCustomClaims\r\n) {\r\n  try {\r\n    const newFolderPrefix = EnsureGoogleStoragePathDir(newDirectoryPath);\r\n    const copyResultsArrArr = await Promise.all(\r\n      items.map(filePath => copyWithChildren(bucket, filePath, newFolderPrefix))\r\n    );\r\n    const copyResultsArr = copyResultsArrArr.reduce((acc, cur) => {\r\n      return acc.concat(cur);\r\n    }, []);\r\n    const results = getResultFromArray(copyResultsArr);\r\n    return results;\r\n  } catch (error) {\r\n    throw new VError(error);\r\n  }\r\n}\r\n"]}
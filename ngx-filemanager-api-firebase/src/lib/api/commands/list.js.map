{"version":3,"file":"list.js","sourceRoot":"","sources":["../../../../../../../projects/ngx-filemanager-api-firebase/src/lib/api/commands/list.ts"],"names":[],"mappings":"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","sourcesContent":["import { Bucket, FileFromStorage, File } from '../../types/google-cloud-types';\r\nimport { EnsureGoogleStoragePathDir } from '../../utils/path-helpers';\r\nimport { GetFilesOptions } from '@google-cloud/storage';\r\nimport {\r\n  translateRawStorage,\r\n  makePhantomStorageFolder,\r\n  translateStorageToResFile\r\n} from '../../utils/translation-helpers';\r\nimport * as request from 'request';\r\nimport { GetPermissionForFile } from '../../utils/permissions-helper';\r\nimport { UserCustomClaims, ResFile } from 'ngx-filemanager-core/public_api';\r\nimport { UserAccessResult } from '../../types/UserAccessResult';\r\nimport { VError } from 'verror';\r\n\r\ninterface FilesAndPrefixes {\r\n  files: File[];\r\n  prefixes: string[];\r\n}\r\n\r\nexport function MakeOptionsListRoot(): GetFilesOptions {\r\n  return {\r\n    delimiter: '/',\r\n    includeTrailingDelimiter: true,\r\n    autoPaginate: false\r\n  } as any;\r\n}\r\n\r\nexport function MakeOptionsList(inputDirectoryPath: string) {\r\n  return {\r\n    delimiter: '/',\r\n    includeTrailingDelimiter: true,\r\n    directory: inputDirectoryPath,\r\n    autoPaginate: false\r\n  } as any;\r\n}\r\n\r\nexport async function GetFilesAndPrefixes(\r\n  bucket: Bucket,\r\n  options: GetFilesOptions\r\n): Promise<FilesAndPrefixes> {\r\n  return new Promise<FilesAndPrefixes>((resolve, reject) => {\r\n    const callback = (\r\n      err: Error | null,\r\n      files?: File[],\r\n      nextQuery?: {},\r\n      apiResponse?: request.Response\r\n    ) => {\r\n      if (err) {\r\n        reject(err);\r\n        return;\r\n      }\r\n      const prefixes = apiResponse['prefixes'] || [];\r\n      const result: FilesAndPrefixes = {\r\n        files: files || [],\r\n        prefixes: prefixes\r\n      };\r\n      resolve(result);\r\n    };\r\n    bucket.getFiles(options, callback);\r\n  });\r\n}\r\n\r\nexport async function GetFiles(\r\n  bucket: Bucket,\r\n  options: GetFilesOptions\r\n): Promise<FileFromStorage[]> {\r\n  try {\r\n    const result = await bucket.getFiles(options);\r\n    const storageObjects = result[0];\r\n    const files = storageObjects.map(o => translateRawStorage(o));\r\n    return files;\r\n  } catch (error) {\r\n    throw new VError(error);\r\n  }\r\n}\r\n\r\nexport async function GetListFromStorage(\r\n  bucket: Bucket,\r\n  inputDirectoryPath: string\r\n): Promise<FileFromStorage[]> {\r\n  const googleStorageDirPath = EnsureGoogleStoragePathDir(inputDirectoryPath);\r\n  const isRootPath = googleStorageDirPath === '/' || '';\r\n  let options;\r\n  if (isRootPath) {\r\n    options = MakeOptionsListRoot();\r\n  } else {\r\n    options = MakeOptionsList(googleStorageDirPath);\r\n  }\r\n  try {\r\n    const result = await GetFilesAndPrefixes(bucket, options);\r\n    const allObjects = result.files.map(o => translateRawStorage(o));\r\n\r\n    const allObjectsPathsSet = new Set(allObjects.map(f => f.ref.name));\r\n    const phantomPrefixes = result.prefixes.filter(\r\n      prefix => !allObjectsPathsSet.has(prefix)\r\n    );\r\n\r\n    const newPhantomFolders = phantomPrefixes.map(phantomPath =>\r\n      makePhantomStorageFolder(phantomPath)\r\n    );\r\n    const combinedList = [...allObjects, ...newPhantomFolders];\r\n    const filesWithoutCurrentDirectory = combinedList.filter(\r\n      f => EnsureGoogleStoragePathDir(f.fullPath) !== googleStorageDirPath\r\n    );\r\n    return filesWithoutCurrentDirectory;\r\n  } catch (error) {\r\n    throw new VError(error);\r\n  }\r\n}\r\n\r\nexport async function GetList(\r\n  bucket: Bucket,\r\n  inputDirectoryPath: string,\r\n  claims: UserCustomClaims\r\n): Promise<ResFile[]> {\r\n  try {\r\n    const files = await GetListFromStorage(bucket, inputDirectoryPath);\r\n    const resFiles = await Promise.all(\r\n      files.map(f => translateStorageToResFile(f))\r\n    );\r\n    const filesAllowed = resFiles.filter(f => {\r\n      const perms = GetPermissionForFile(f.permissions, claims);\r\n      const minPerms = UserAccessResult.r__;\r\n      return perms > minPerms;\r\n    });\r\n    return filesAllowed;\r\n  } catch (error) {\r\n    throw new VError(error);\r\n  }\r\n}\r\n"]}
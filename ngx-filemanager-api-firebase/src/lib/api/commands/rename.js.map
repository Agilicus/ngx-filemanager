{"version":3,"file":"rename.js","sourceRoot":"","sources":["../../../../../../../projects/ngx-filemanager-api-firebase/src/lib/api/commands/rename.ts"],"names":[],"mappings":";;;AACA,uEAAgF;AAChF,yDAA+D;AAC/D,6DAAqF;AAErF,iCAAgC;AAEhC,SAAsB,UAAU,CAC9B,MAAc,EACd,IAAY,EACZ,WAAmB,EACnB,MAAwB;;;;;;;oBAGhB,mBAAiB,kCAAmB,CAAC,IAAI,CAAC,CAAC;oBAC3C,mBAAiB,kCAAmB,CAAC,WAAW,CAAC,CAAC;oBAClD,MAAM,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;yBAC/B,MAAM,EAAN,wBAAM;oBACF,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACb,qBAAM,8BAAa,CAAC,IAAI,EAAE,gBAAc,EAAE,gBAAc,CAAC,EAAA;;oBAArE,SAAS,GAAG,SAAyD;oBACrE,MAAM,GAAG,+BAAS,CAAC,SAAS,CAAC,CAAC;oBACpC,sBAAO,MAAM,EAAC;wBAEI,qBAAM,yCAAwB,CAAC,MAAM,EAAE,gBAAc,CAAC,EAAA;;oBAApE,WAAW,GAAG,SAAsD;oBACtD,qBAAM,OAAO,CAAC,GAAG,CACnC,WAAW,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,8BAAa,CAAC,CAAC,EAAE,gBAAc,EAAE,gBAAc,CAAC,EAAhD,CAAgD,CAAC,CACvE,EAAA;;oBAFK,WAAW,GAAG,SAEnB;oBACK,OAAO,GAAG,wCAAkB,CAAC,WAAW,CAAC,CAAC;oBAChD,sBAAO,OAAO,EAAC;;;oBAEf,MAAM,IAAI,eAAM,CAAC,OAAK,CAAC,CAAC;;;;;CAE3B;AAzBD,gCAyBC","sourcesContent":["import { Bucket } from '../../types/google-cloud-types';\r\nimport { getResult, getResultFromArray } from '../../utils/translation-helpers';\r\nimport { EnsureNoPrefixSlash } from '../../utils/path-helpers';\r\nimport { GetAllChildrenWithPrefix, TryRenameFile } from '../../utils/storage-helper';\r\nimport { UserCustomClaims } from 'ngx-filemanager-core/public_api';\r\nimport { VError } from 'verror';\r\n\r\nexport async function RenameFile(\r\n  bucket: Bucket,\r\n  item: string,\r\n  newItemPath: string,\r\n  claims: UserCustomClaims\r\n) {\r\n  try {\r\n    const itemsPrefixOld = EnsureNoPrefixSlash(item);\r\n    const itemsPrefixNew = EnsureNoPrefixSlash(newItemPath);\r\n    const isFile = !item.endsWith('/');\r\n    if (isFile) {\r\n      const file = bucket.file(item);\r\n      const resultObj = await TryRenameFile(file, itemsPrefixOld, itemsPrefixNew);\r\n      const result = getResult(resultObj);\r\n      return result;\r\n    }\r\n    const allChildren = await GetAllChildrenWithPrefix(bucket, itemsPrefixOld);\r\n    const moveResults = await Promise.all(\r\n      allChildren.map(f => TryRenameFile(f, itemsPrefixOld, itemsPrefixNew))\r\n    );\r\n    const results = getResultFromArray(moveResults);\r\n    return results;\r\n  } catch (error) {\r\n    throw new VError(error);\r\n  }\r\n}\r\n"]}
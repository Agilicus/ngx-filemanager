{"version":3,"file":"firebase-storage-api.js","sourceRoot":"","sources":["../../../../../../projects/ngx-filemanager-api-firebase/src/lib/api/firebase-storage-api.ts"],"names":[],"mappings":"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","sourcesContent":["import { Storage, Bucket } from '../types/google-cloud-types';\r\nimport * as commands from './commands';\r\nimport {\r\n  ReqBodyList,\r\n  UserCustomClaims,\r\n  ResBodyList,\r\n  ReqBodyRename,\r\n  ResBodyRename,\r\n  ReqBodyMove,\r\n  ResBodyMove,\r\n  ReqBodyCopy,\r\n  ResBodyCopy,\r\n  ReqBodyRemove,\r\n  ResBodyRemove,\r\n  ReqBodyEdit,\r\n  ResBodyEdit,\r\n  ReqBodyGetContent,\r\n  ResBodyGetContent,\r\n  ReqBodyGetMeta,\r\n  ResBodyGetMeta,\r\n  ReqBodyCreateFolder,\r\n  ResBodyCreateFolder,\r\n  ReqBodySetPermissions,\r\n  ResBodySetPermissions,\r\n  ResBodyUploadFile\r\n} from 'ngx-filemanager-core/public_api';\r\nimport { VError } from 'verror';\r\n\r\nasync function CheckHasBodyProp(body: {}, bodyFieldName: string) {\r\n  const exists = body[bodyFieldName];\r\n  if (!exists) {\r\n    throw new Error(`Request is missing property in req.body: '${bodyFieldName}'`);\r\n  }\r\n}\r\n\r\nexport class NgxFileMangerApiFireBaseClass {\r\n  constructor(public storage: Storage) {}\r\n\r\n  private async getBucket(bucketname: string): Promise<Bucket> {\r\n    if (!bucketname) {\r\n      throw new Error(`Request is missing property in req.body: 'bucketname'`);\r\n    }\r\n    try {\r\n      const bucket = this.storage.bucket(bucketname);\r\n      const exists = (await bucket.exists()).shift();\r\n      if (!exists) {\r\n        throw new Error(\r\n          `bucket: \"${bucketname}\" doesn't exist, please create it first`\r\n        );\r\n      }\r\n      return bucket;\r\n    } catch (error) {\r\n      throw new Error('Error retrieving bucket: ' + error.message);\r\n    }\r\n  }\r\n\r\n  async HandleList(\r\n    body: ReqBodyList,\r\n    claims: UserCustomClaims\r\n  ): Promise<ResBodyList> {\r\n    try {\r\n      await CheckHasBodyProp(body, 'path');\r\n      const bucket = await this.getBucket(body.bucketname);\r\n      const resFiles = await commands.GetList(bucket, body.path, claims);\r\n      const response: ResBodyList = {\r\n        result: resFiles\r\n      };\r\n      return response;\r\n    } catch (error) {\r\n      throw new VError(error);\r\n    }\r\n  }\r\n\r\n  async HandleRename(\r\n    body: ReqBodyRename,\r\n    claims: UserCustomClaims\r\n  ): Promise<ResBodyRename> {\r\n    try {\r\n      await CheckHasBodyProp(body, 'item');\r\n      await CheckHasBodyProp(body, 'newItemPath');\r\n      const bucket = await this.getBucket(body.bucketname);\r\n      const result = await commands.RenameFile(\r\n        bucket,\r\n        body.item,\r\n        body.newItemPath,\r\n        claims\r\n      );\r\n      const response: ResBodyRename = {\r\n        result: result\r\n      };\r\n      return response;\r\n    } catch (error) {\r\n      throw new VError(error);\r\n    }\r\n  }\r\n\r\n  async HandleMove(\r\n    body: ReqBodyMove,\r\n    claims: UserCustomClaims\r\n  ): Promise<ResBodyMove> {\r\n    try {\r\n      const bucket = await this.getBucket(body.bucketname);\r\n      await CheckHasBodyProp(body, 'items');\r\n      await CheckHasBodyProp(body, 'newPath');\r\n      const result = await commands.MoveFiles(\r\n        bucket,\r\n        body.items,\r\n        body.newPath,\r\n        claims\r\n      );\r\n      const response: ResBodyMove = {\r\n        result: result\r\n      };\r\n      return response;\r\n    } catch (error) {\r\n      throw new VError(error);\r\n    }\r\n  }\r\n\r\n  async HandleCopy(\r\n    body: ReqBodyCopy,\r\n    claims: UserCustomClaims\r\n  ): Promise<ResBodyCopy> {\r\n    try {\r\n      await CheckHasBodyProp(body, 'newPath');\r\n      const bucket = await this.getBucket(body.bucketname);\r\n      let filesToCopy;\r\n      if (body.items) {\r\n        filesToCopy = body.items;\r\n      } else if (body.singleFileName) {\r\n        filesToCopy = [body.singleFileName];\r\n      } else {\r\n        throw new Error(\r\n          'Request does not contain either body.items or body.singleFileName'\r\n        );\r\n      }\r\n      const result = await commands.CopyFiles(\r\n        bucket,\r\n        filesToCopy,\r\n        body.newPath,\r\n        claims\r\n      );\r\n      const response: ResBodyCopy = {\r\n        result: result\r\n      };\r\n      return response;\r\n    } catch (error) {\r\n      throw new VError(error);\r\n    }\r\n  }\r\n\r\n  async HandleRemove(\r\n    body: ReqBodyRemove,\r\n    claims: UserCustomClaims\r\n  ): Promise<ResBodyRemove> {\r\n    try {\r\n      await CheckHasBodyProp(body, 'items');\r\n      const bucket = await this.getBucket(body.bucketname);\r\n      const result = await commands.RemoveFiles(bucket, body.items, claims);\r\n      const response: ResBodyRemove = {\r\n        result: result\r\n      };\r\n      return response;\r\n    } catch (error) {\r\n      throw new VError(error);\r\n    }\r\n  }\r\n\r\n  async HandleEdit(\r\n    body: ReqBodyEdit,\r\n    claims: UserCustomClaims\r\n  ): Promise<ResBodyEdit> {\r\n    try {\r\n      await CheckHasBodyProp(body, 'item');\r\n      await CheckHasBodyProp(body, 'content');\r\n      const bucket = await this.getBucket(body.bucketname);\r\n      const result = await commands.EditFile(\r\n        bucket,\r\n        body.item,\r\n        body.content,\r\n        claims\r\n      );\r\n      const response: ResBodyEdit = {\r\n        result: result\r\n      };\r\n      return response;\r\n    } catch (error) {\r\n      throw new VError(error);\r\n    }\r\n  }\r\n\r\n  async HandleGetContent(\r\n    body: ReqBodyGetContent,\r\n    claims: UserCustomClaims\r\n  ): Promise<ResBodyGetContent> {\r\n    try {\r\n      await CheckHasBodyProp(body, 'item');\r\n      const bucket = await this.getBucket(body.bucketname);\r\n      const result = await commands.GetFileContent(bucket, body.item, claims);\r\n      const response: ResBodyGetContent = {\r\n        result: result\r\n      };\r\n      return response;\r\n    } catch (error) {\r\n      throw new VError(error);\r\n    }\r\n  }\r\n\r\n  async HandleGetMeta(\r\n    body: ReqBodyGetMeta,\r\n    claims: UserCustomClaims\r\n  ): Promise<ResBodyGetMeta> {\r\n    try {\r\n      await CheckHasBodyProp(body, 'item');\r\n      const bucket = await this.getBucket(body.bucketname);\r\n      const downloadUrl = await commands.GetFileMeta(bucket, body.item, claims);\r\n      const response: ResBodyGetMeta = {\r\n        result: {\r\n          success: true\r\n        }\r\n      };\r\n      response.result.url = downloadUrl;\r\n      response.result.success = true;\r\n      return response;\r\n    } catch (error) {\r\n      throw new VError(error);\r\n    }\r\n  }\r\n\r\n  async HandleCreateFolder(\r\n    body: ReqBodyCreateFolder,\r\n    claims: UserCustomClaims\r\n  ): Promise<ResBodyCreateFolder> {\r\n    try {\r\n      await CheckHasBodyProp(body, 'newPath');\r\n      const bucket = await this.getBucket(body.bucketname);\r\n      const result = await commands.CreateFolder(bucket, body.newPath, claims);\r\n      const response: ResBodyCreateFolder = {\r\n        result: result\r\n      };\r\n      return response;\r\n    } catch (error) {\r\n      throw new VError(error);\r\n    }\r\n  }\r\n\r\n  async HandleSetPermissions(\r\n    body: ReqBodySetPermissions,\r\n    claims: UserCustomClaims\r\n  ): Promise<ResBodySetPermissions> {\r\n    try {\r\n      await CheckHasBodyProp(body, 'items');\r\n      await CheckHasBodyProp(body, 'role');\r\n      await CheckHasBodyProp(body, 'entity');\r\n      const bucket = await this.getBucket(body.bucketname);\r\n      const result = await commands.ChangePermissions(\r\n        bucket,\r\n        body.items,\r\n        body.role,\r\n        body.entity,\r\n        body.recursive,\r\n        claims\r\n      );\r\n      const response: ResBodySetPermissions = {\r\n        result: result\r\n      };\r\n      return response;\r\n    } catch (error) {\r\n      throw new VError(error);\r\n    }\r\n  }\r\n\r\n  async HandleSaveFile(\r\n    bucketname: string,\r\n    directoryPath: string,\r\n    originalname: string,\r\n    mimetype: string,\r\n    buffer: Buffer,\r\n    claims: UserCustomClaims\r\n  ): Promise<ResBodyUploadFile> {\r\n    try {\r\n      const bucket = await this.getBucket(bucketname);\r\n      await commands.UploadFile(\r\n        bucket,\r\n        directoryPath,\r\n        originalname,\r\n        mimetype,\r\n        buffer,\r\n        claims\r\n      );\r\n      const result = {\r\n        result: {\r\n          success: true\r\n        }\r\n      };\r\n      return result;\r\n    } catch (error) {\r\n      throw new VError(error);\r\n    }\r\n  }\r\n}\r\n"]}
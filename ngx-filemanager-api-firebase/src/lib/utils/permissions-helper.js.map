{"version":3,"file":"permissions-helper.js","sourceRoot":"","sources":["../../../../../../projects/ngx-filemanager-api-firebase/src/lib/utils/permissions-helper.ts"],"names":[],"mappings":";;;AAAA,+CAAqD;AAOrD,mDAAoE;AAGpE,SAAgB,mBAAmB;IACjC,OAAO;QACL,MAAM,EAAE,EAAE;QACV,OAAO,EAAE,EAAE;QACX,OAAO,EAAE,EAAE;KACZ,CAAC;AACJ,CAAC;AAND,kDAMC;AAED,SAAsB,uBAAuB,CAAC,IAAU;;;YACtD,sBAAO,gCAAe,CAAC,IAAI,EAAE,aAAa,CAAC,EAAC;;;CAC7C;AAFD,0DAEC;AAED,SAAsB,qBAAqB,CACzC,IAAU,EACV,cAAiC;;;YAEjC,sBAAO,gCAAe,CAAC,IAAI,EAAE,aAAa,EAAE,cAAc,CAAC,EAAC;;;CAC7D;AALD,sDAKC;AAED,SAAS,cAAc;IACrB,OAAO;QACL,MAAM,EAAE,EAAE;KACX,CAAC;AACJ,CAAC;AAED,SAAsB,oBAAoB,CAAC,GAAY;;;;;;;oBAG3C,qBAAM,kCAAmB,CAAC,GAAG,CAAC,EAAA;;oBAAtC,KAAK,GAAG,SAA8B,CAAC;;;;oBAEvC,OAAO,CAAC,IAAI,CAAC,oDAAoD,EAAE,EAAC,KAAK,SAAA,EAAC,CAAC,CAAC;oBAC5E,sBAAO,cAAc,EAAE,EAAC;;oBAEpB,MAAM,GAAG,KAAyB,CAAC;oBACzC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;wBAClB,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC;qBACpB;oBACD,sBAAO,MAAM,EAAC;;;;CACf;AAbD,oDAaC;AAED;;;;;;;;;;EAUE;AAEF,SAAgB,oBAAoB,CAClC,eAAkC,EAClC,eAAiC;IAEjC,IAAM,MAAM,GAAG,IAAI,GAAG,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;IAC/C,IAAM,eAAe,GAAG,eAAe,IAAI,mBAAmB,EAAE,CAAC;IACjE,IAAM,QAAQ,GAAG,aAAa,CAAC,eAAe,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IAChE,IAAM,QAAQ,GAAG,aAAa,CAAC,eAAe,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IAChE,IAAM,OAAO,GAAG,aAAa,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAE9D,IAAI,YAAY,GAAqB,CAAC,CAAC;IACvC,IAAI,QAAQ,EAAE;QACZ,YAAY,IAAI,CAAC,CAAC,CAAC,WAAW;KAC/B;IACD,IAAI,QAAQ,EAAE;QACZ,YAAY,IAAI,CAAC,CAAC,CAAC,YAAY;KAChC;IACD,IAAI,OAAO,EAAE;QACX,YAAY,IAAI,CAAC,CAAC,CAAC,cAAc;KAClC;IACD,OAAO,YAAY,CAAC;AACtB,CAAC;AArBD,oDAqBC;AAED,SAAgB,aAAa,CAC3B,GAAuB,EACvB,YAAyB;IAEzB,IAAM,qBAAqB,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC;IAClD,IAAI,qBAAqB,EAAE;QACzB,OAAO,IAAI,CAAC;KACb;IACD,IAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAA3B,CAA2B,CAAC,CAAC;IAClE,OAAO,CAAC,CAAC,SAAS,CAAC;AACrB,CAAC;AAVD,sCAUC","sourcesContent":["import { GetTokenFromRequest } from './token-helper';\r\nimport { File } from '../types/google-cloud-types';\r\nimport {\r\n  PermissionsObject,\r\n  UserCustomClaims,\r\n  PermissionEntity\r\n} from 'ngx-filemanager-core/public_api';\r\nimport { GetMetaProperty, SetMetaProperty } from './storage-helper';\r\nimport { UserAccessResult } from '../types/UserAccessResult';\r\n\r\nexport function blankPermissionsObj(): PermissionsObject {\r\n  return {\r\n    owners: [],\r\n    writers: [],\r\n    readers: []\r\n  };\r\n}\r\n\r\nexport async function RetrieveFilePermissions(file: File): Promise<PermissionsObject> {\r\n  return GetMetaProperty(file, 'permissions');\r\n}\r\n\r\nexport async function UpdateFilePermissions(\r\n  file: File,\r\n  newPermissions: PermissionsObject\r\n) {\r\n  return SetMetaProperty(file, 'permissions', newPermissions);\r\n}\r\n\r\nfunction blankUserClaim(): UserCustomClaims {\r\n  return {\r\n    groups: []\r\n  };\r\n}\r\n\r\nexport async function RetrieveCustomClaims(req: Request) {\r\n  let token;\r\n  try {\r\n    token = await GetTokenFromRequest(req);\r\n  } catch (error) {\r\n    console.warn('No token found on request, no permissions for user', {error});\r\n    return blankUserClaim();\r\n  }\r\n  const claims = token as UserCustomClaims;\r\n  if (!claims.groups) {\r\n    claims.groups = [];\r\n  }\r\n  return claims;\r\n}\r\n\r\n/*\r\n  Number\tOctal Permission Representation\tRef\r\n  0\t ---  No permission\r\n  1\t --x  Execute permission\r\n  2\t -w-  Write permission\r\n  3\t -wx  Execute and write permission: 1 (execute) + 2 (write) = 3\r\n  4\t r--  Read permission\r\n  5\t r-x  Read and execute permission: 4 (read) + 1 (execute) = 5\r\n  6\t rw-  Read and write permission: 4 (read) + 2 (write) = 6\r\n  7\t rwx  All permissions: 4 (read) + 2 (write) + 1 (execute) = 7\r\n*/\r\n\r\nexport function GetPermissionForFile(\r\n  filePermissions: PermissionsObject,\r\n  userPermissions: UserCustomClaims\r\n): UserAccessResult {\r\n  const groups = new Set(userPermissions.groups);\r\n  const safePermissions = filePermissions || blankPermissionsObj();\r\n  const isReader = IsPartOfArray(safePermissions.readers, groups);\r\n  const isWriter = IsPartOfArray(safePermissions.writers, groups);\r\n  const isOwner = IsPartOfArray(safePermissions.owners, groups);\r\n\r\n  let currentPerms: UserAccessResult = 0;\r\n  if (isReader) {\r\n    currentPerms += 4; // 4 (read)\r\n  }\r\n  if (isWriter) {\r\n    currentPerms += 2; // 2 (write)\r\n  }\r\n  if (isOwner) {\r\n    currentPerms += 1; // 1 (execute)\r\n  }\r\n  return currentPerms;\r\n}\r\n\r\nexport function IsPartOfArray(\r\n  arr: PermissionEntity[],\r\n  userGroupSet: Set<string>\r\n) {\r\n  const hasNoPermissionsAtAll = !arr || !arr.length;\r\n  if (hasNoPermissionsAtAll) {\r\n    return true;\r\n  }\r\n  const isInArray = arr.find(entity => userGroupSet.has(entity.id));\r\n  return !!isInArray;\r\n}\r\n"]}
{"version":3,"file":"storage-helper.js","sourceRoot":"","sources":["../../../../../../projects/ngx-filemanager-api-firebase/src/lib/utils/storage-helper.ts"],"names":[],"mappings":"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","sourcesContent":["import { Bucket, File } from '../types/google-cloud-types';\r\nimport { GetFilesOptions } from '@google-cloud/storage';\r\nimport { EnsureNoPrefixSlash } from './path-helpers';\r\nimport * as path from 'path';\r\nimport { VError } from 'verror';\r\n\r\nexport async function GetAllChildrenWithPrefix(\r\n  bucket: Bucket,\r\n  fileOrDirectoryPath: string\r\n): Promise<File[]> {\r\n  const pathNoPrefix = EnsureNoPrefixSlash(fileOrDirectoryPath);\r\n  const options: GetFilesOptions = {};\r\n  options.prefix = pathNoPrefix;\r\n  try {\r\n    const result = await bucket.getFiles(options);\r\n    const files = result[0];\r\n    return files;\r\n  } catch (error) {\r\n    throw new VError(error);\r\n  }\r\n}\r\n\r\nexport async function TryRenameFile(\r\n  file: File,\r\n  oldPrefix: string,\r\n  newPrefix: string\r\n) {\r\n  try {\r\n    const originalFilePath = file.name;\r\n    const relativePath = originalFilePath.slice(oldPrefix.length);\r\n    const newPath = path.join(newPrefix, relativePath);\r\n    const newFilePath = EnsureNoPrefixSlash(newPath);\r\n    console.log(`- renaming \"${originalFilePath}\" -> \"${newFilePath}\"`);\r\n    const result = await file.move(newFilePath);\r\n    return result[0];\r\n  } catch (error) {\r\n    throw new VError(error);\r\n  }\r\n}\r\n\r\nexport async function TryCopyFile(\r\n  file: File,\r\n  oldPrefix: string,\r\n  newPrefix: string\r\n) {\r\n  try {\r\n    const originalFilePath = file.name;\r\n    const relativePath = originalFilePath.slice(oldPrefix.length);\r\n    const newPath = path.join(newPrefix, relativePath);\r\n    const newFilePath = EnsureNoPrefixSlash(newPath);\r\n    console.log(`- copying \"${originalFilePath}\" -> \"${newFilePath}\"`);\r\n    const result = await file.copy(newFilePath);\r\n    return result[1];\r\n  } catch (error) {\r\n    throw new VError(error);\r\n  }\r\n}\r\n\r\nexport async function SetMetaProperty(\r\n  file: File,\r\n  key: string,\r\n  newValue: {}\r\n): Promise<any> {\r\n  try {\r\n    const newValueString = JSON.stringify(newValue);\r\n    const metaObj = { metadata: {} };\r\n    metaObj.metadata[key] = newValueString;\r\n    const res = await file.setMetadata(metaObj);\r\n    return res[0];\r\n  } catch (error) {\r\n    throw new VError(error);\r\n  }\r\n}\r\n\r\nexport async function GetMetaProperty(file: File, key: string): Promise<any> {\r\n  let newValueString;\r\n  try {\r\n    const [meta] = await file.getMetadata();\r\n    const metaData = meta.metadata || {};\r\n    newValueString = metaData[key] || '{}';\r\n  } catch (error) {\r\n    throw new VError(error);\r\n  }\r\n  try {\r\n    const newValueObj = JSON.parse(newValueString);\r\n    return newValueObj;\r\n  } catch (error) {\r\n    console.error(\r\n      `could not convert the meta property \"${key}\" to a JSON object`,\r\n      error\r\n    );\r\n    return newValueString;\r\n  }\r\n}\r\n"]}
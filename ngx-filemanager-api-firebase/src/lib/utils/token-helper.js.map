{"version":3,"file":"token-helper.js","sourceRoot":"","sources":["../../../../../../projects/ngx-filemanager-api-firebase/src/lib/utils/token-helper.ts"],"names":[],"mappings":";;;AAAA,kCAAoC;AAEpC,SAAsB,mBAAmB,CAAC,GAAY;;;;YAE9C,UAAU,GACd,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC;gBAC5B,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YAC/C,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC;YAEjC,IAAI,UAAU,EAAE;gBACd,mDAAmD;gBACnD,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;aAC5D;iBAAM,IAAI,SAAS,EAAE;gBACpB,iCAAiC;gBACjC,OAAO,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC;aACpC;iBAAM;gBACL,MAAM,IAAI,KAAK,CACb,8DAA8D,CAC/D,CAAC;aACH;YAEK,YAAY,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;YACxC,sBAAO,YAAY,EAAC;;;CACrB;AArBD,kDAqBC;AAED,SAAsB,SAAS,CAAC,MAAc;;;;YAC5C,IAAI;gBACI,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;gBACnD,sBAAO,OAAO,EAAC;aAChB;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,IAAI,KAAK,CAAC,oBAAoB,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;aACvD;;;;CACF;AAPD,8BAOC","sourcesContent":["import * as jwt from 'jsonwebtoken';\n\nexport async function GetTokenFromRequest(req: Request) {\n  let idToken;\n  const isInHeader =\n    req.headers['authorization'] &&\n    req.headers['authorization'].startsWith('Bearer ');\n  const hasCookie = req['cookies'];\n\n  if (isInHeader) {\n    // Read the ID Token from the Authorization header.\n    idToken = req.headers['authorization'].split('Bearer ')[1];\n  } else if (hasCookie) {\n    // Read the ID Token from cookie.\n    idToken = req['cookies'].__session;\n  } else {\n    throw new Error(\n      'Request Header doesn\\'t contain a valid authorization bearer'\n    );\n  }\n\n  const decodedToken = DecodeJWT(idToken);\n  return decodedToken;\n}\n\nexport async function DecodeJWT(bearer: string): Promise<{}> {\n  try {\n    const decoded = jwt.decode(bearer, { json: true });\n    return decoded;\n  } catch (error) {\n    throw new Error('Error decoding JWT' + error.message);\n  }\n}\n"]}
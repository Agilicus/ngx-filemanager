{"version":3,"file":"translation-helpers.js","sourceRoot":"","sources":["../../../../../../projects/ngx-filemanager-api-firebase/src/lib/utils/translation-helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  EnsurePrefixSlash,\r\n  HasTrailingSlash,\r\n  EnsureAbsolutePathDir,\r\n  EnsureAbsolutePathFile\r\n} from './path-helpers';\r\nimport { FileFromStorage, File } from '../types/google-cloud-types';\r\nimport { Readable } from 'stream';\r\nimport * as request from 'request';\r\nimport * as path from 'path';\r\nimport { RetrieveFilePermissions } from './permissions-helper';\r\nimport { ResFile, ResultObj } from 'ngx-filemanager-core/public_api';\r\nimport { VError } from 'verror';\r\n\r\nexport function translateRawStorage(storageObject: File): FileFromStorage {\r\n  const filePath = storageObject.name;\r\n  const filePathParsed = EnsurePrefixSlash(filePath);\r\n  return {\r\n    ref: storageObject,\r\n    name: path.basename(filePathParsed),\r\n    fullPath: filePathParsed,\r\n    isDir: HasTrailingSlash(filePathParsed)\r\n  };\r\n}\r\n\r\nexport function makePhantomStorageFolder(folderPath: string): FileFromStorage {\r\n  const pathParsed = EnsureAbsolutePathDir(folderPath);\r\n  return {\r\n    ref: null,\r\n    name: path.basename(pathParsed),\r\n    fullPath: pathParsed,\r\n    isDir: true,\r\n    isPhantomFolder: true\r\n  };\r\n}\r\n\r\nexport async function translateStorageToResFile(\r\n  f: FileFromStorage\r\n): Promise<ResFile> {\r\n  const resFile: ResFile = {} as any;\r\n  resFile.name = f.name;\r\n  if (f.isDir) {\r\n    resFile.type = 'dir';\r\n    resFile.fullPath = EnsureAbsolutePathDir(f.fullPath);\r\n  } else {\r\n    resFile.type = 'file';\r\n    resFile.fullPath = EnsureAbsolutePathFile(f.fullPath);\r\n  }\r\n  if (f.isPhantomFolder) {\r\n    resFile.isPhantomFolder = true;\r\n    return resFile;\r\n  }\r\n  try {\r\n    const [aclObj] = await f.ref.acl.get();\r\n    resFile.rightsFirebase = aclObj as any;\r\n    const metaResp = await f.ref.getMetadata();\r\n    const metaData = metaResp[0];\r\n    const customMeta = metaData.metadata || {};\r\n    const permissions = await RetrieveFilePermissions(f.ref);\r\n    resFile.permissions = permissions;\r\n    resFile.size = metaData.size;\r\n    resFile.date = metaData.updated;\r\n    resFile.metaData = customMeta;\r\n    return resFile;\r\n  } catch (error) {\r\n    throw new VError(error);\r\n  }\r\n}\r\n\r\nexport async function StreamToPromise(stream: Readable): Promise<string> {\r\n  return new Promise<string>((resolve, reject) => {\r\n    let stringRes: string;\r\n    stream.on('readable', function(buffer) {\r\n      const part: string = buffer.read().toString() as string;\r\n      stringRes += part;\r\n      console.log('stream data ' + part);\r\n    });\r\n    stream.on('end', res => {\r\n      resolve(stringRes);\r\n    });\r\n    stream.on('error', err => {\r\n      const errmsg =\r\n        'StreamToPromise(stream: Readable), Error reading stream: ' +\r\n        err.message;\r\n      console.error(errmsg, { err });\r\n      reject(errmsg);\r\n    });\r\n  });\r\n}\r\n\r\nexport function getResult(res: request.Response): ResultObj {\r\n  const fail = res.statusCode !== 204;\r\n  return {\r\n    success: !fail,\r\n    error: fail ? 'error: ' + res.body : null\r\n  };\r\n}\r\n\r\nexport function getResultFromArray(res: request.Response[]): ResultObj {\r\n  const fail = res.find(r => r.statusCode !== 204);\r\n  return {\r\n    success: !fail,\r\n    error: fail ? 'error: ' + JSON.stringify(fail.body) : null\r\n  };\r\n}\r\n"]}
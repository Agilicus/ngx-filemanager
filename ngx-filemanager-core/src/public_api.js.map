{"version":3,"file":"public_api.js","sourceRoot":"","sources":["../../../../projects/ngx-filemanager-core/src/public_api.ts"],"names":[],"mappings":";AAAA;;GAEG;;;AAEH,4EAAkD","sourcesContent":["/*\n * Public API Surface of ngx-filemanager-core\n */\n\nexport * from './lib/ngx-filemanager-core.module';\n\n// Based on the api from: https://github.com/joni2back/angular-filemanager/blob/master/API.md\n// tslint:disable:no-empty-interface\n\nexport type FileManagerAction =\n  | 'list'\n  | 'rename'\n  | 'move'\n  | 'copy'\n  | 'remove'\n  | 'edit'\n  | 'getContent'\n  | 'getMeta'\n  | 'createFolder'\n  | 'changePermissions'\n  | 'compress'\n  | 'extract'\n  | 'downloadMultiple';\n\nexport interface ReqBodyAction {\n  action: FileManagerAction;\n  bucketname: string;\n}\n\nexport interface ResultObj {\n  success: boolean;\n  error?: string;\n}\n\nexport interface ResBodySuccess {\n  result: ResultObj;\n}\n\n// LIST\n\nexport interface ReqBodyList extends ReqBodyAction {\n  path: string;\n}\n\nexport interface ResFile {\n  name: string; // filename with extension or directory name\n  fullPath: string;\n  rightsFirebase: {}[]; // unix string\n  permissions: PermissionsObject; // unix string\n  perms?: string;\n  size: string; // bytes\n  date: string; // iso format\n  type: 'dir' | 'file';\n  isPhantomFolder?: boolean;\n  metaData?: any;\n}\n\nexport interface ResBodyList {\n  result: ResFile[];\n}\n\n// RENAME\n\nexport interface ReqBodyRename extends ReqBodyAction {\n  item: string;\n  newItemPath: string;\n}\n\nexport interface ResBodyRename extends ResBodySuccess {}\n\n// MOVE\n\nexport interface ReqBodyMove extends ReqBodyAction {\n  items: string[];\n  newPath: string;\n}\n\nexport interface ResBodyMove extends ResBodySuccess {}\n\n// COPY\n\nexport interface ReqBodyCopy extends ReqBodyAction {\n  items?: string[];\n  singleFileName?: string;\n  newPath: string;\n}\n\nexport interface ResBodyCopy extends ResBodySuccess {}\n\n// REMOVE\n\nexport interface ReqBodyRemove extends ReqBodyAction {\n  items?: string[];\n}\n\nexport interface ResBodyRemove extends ResBodySuccess {}\n\n// EDIT\n\nexport interface ReqBodyEdit extends ReqBodyAction {\n  item: string;\n  content: string;\n}\n\nexport interface ResBodyEdit extends ResBodySuccess {}\n\n// GETCONTENT\n\nexport interface ReqBodyGetContent extends ReqBodyAction {\n  item: string;\n}\n\nexport interface ResBodyGetContent {\n  result: string;\n}\n\n// CREATE FOLDER\n\nexport interface ReqBodyCreateFolder extends ReqBodyAction {\n  newPath: string;\n}\n\nexport interface ResBodyCreateFolder extends ResBodySuccess {}\n\n// SET PERMISSIONS\n\nexport interface PermissionEntity {\n  name: string;\n  id: string;\n  type: 'group' | 'user';\n}\nexport interface PermissionsObject {\n  readers: PermissionEntity[];\n  writers: PermissionEntity[];\n  owners: PermissionEntity[];\n}\n\nexport interface UserCustomClaims {\n  groups: string[];\n}\n\nexport type PermisionsRole = 'OWNER' | 'READER' | 'WRITER';\n\nexport interface ReqBodySetPermissions extends ReqBodyAction {\n  items: string[];\n  role: PermisionsRole;\n  entity: PermissionEntity;\n  recursive: boolean;\n}\n\nexport interface ResBodySetPermissions extends ResBodySuccess {}\n\n// UPLOAD FILE\n\nexport interface ResBodyUploadFile extends ResBodySuccess {}\n\n// UPLOAD FILE\n\nexport interface ReqBodyGetMeta extends ReqBodyAction {\n  item: string;\n}\n\nexport interface ResBodyGetMeta extends ResBodySuccess {\n  result: {\n    url?: string;\n    success: boolean;\n    error?: string;\n  };\n}\n\n// CLIENT\n\nexport interface FileSystemProvider {\n  // Actions\n  List(path: string): Promise<ResBodyList>;\n  CreateFolder(newPath: string): Promise<ResBodyCreateFolder>;\n\n  // File/Directory Actions\n\n  Copy(singleFileName: string, newPath: string): Promise<ResBodyCopy>;\n  Move(item: string, newPath: string): Promise<ResBodyMove>;\n  Rename(item: string, newItemPath: string): Promise<ResBodyRename>;\n  Edit(item: string, content: string): Promise<ResBodyEdit>;\n  Getcontent(item: string): Promise<ResBodyGetContent>;\n  SetPermissions(\n    item: string,\n    role: PermisionsRole,\n    entity: PermissionEntity,\n    recursive?: boolean\n  ): Promise<ResBodySetPermissions>;\n\n  // File/Directory Bulk Actions\n\n  MoveMultiple(items: string[], newPath: string): Promise<ResBodyMove>;\n  CopyMultiple(items: string[], newPath: string): Promise<ResBodyCopy>;\n  SetPermissionsMultiple(\n    items: string[],\n    role: PermisionsRole,\n    entity: PermissionEntity,\n    recursive?: boolean\n  ): Promise<ResBodySetPermissions>;\n  Remove(items: string[]): Promise<ResBodyRemove>;\n  GetUploadApiUrl(currentPath: string): string;\n  CreateDownloadLink(file: ResFile): Promise<string>;\n}\n"]}